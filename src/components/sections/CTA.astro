---
export interface Props {
  title: string;
  description?: string;
  ctaText: string;
  ctaLink: string;
  variant?: 'primary' | 'secondary' | 'dark';
  centered?: boolean;
}

const {
  title,
  description,
  ctaText,
  ctaLink,
  variant = 'primary',
  centered = true
} = Astro.props;

const variantClasses = {
  primary: 'bg-primary-600 text-white',
  secondary: 'bg-gray-100 text-gray-900',
  dark: 'bg-gray-900 text-white'
};

const buttonClasses = {
  primary: 'bg-white text-primary-600 hover:bg-gray-50',
  secondary: 'bg-primary-600 text-white hover:bg-primary-700',
  dark: 'bg-primary-600 text-white hover:bg-primary-700'
};
---

<section class:list={[
  'py-16 lg:py-24',
  variantClasses[variant]
]}>
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class:list={[
      { 'text-center': centered },
      { 'max-w-3xl mx-auto': centered }
    ]}>
      <h2 class="text-3xl md:text-4xl font-bold font-heading mb-6">
        {title}
      </h2>
      
      {description && (
        <p class="text-lg md:text-xl opacity-90 mb-8 leading-relaxed">
          {description}
        </p>
      )}
      
      <div class:list={[
        { 'flex justify-center': centered },
        { 'flex justify-start': !centered }
      ]}>
        <a
          href={ctaLink}
          class:list={[
            'inline-flex items-center justify-center px-8 py-4 text-lg font-medium rounded-md border-2 border-transparent focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors',
            buttonClasses[variant],
            { 'focus:ring-primary-500': variant !== 'primary' },
            { 'focus:ring-white': variant === 'primary' }
          ]}
        >
          {ctaText}
          <svg class="ml-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
          </svg>
        </a>
      </div>
    </div>
  </div>
</section>